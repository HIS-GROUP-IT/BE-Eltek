{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import \"reflect-metadata\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport cors from \"cors\";\r\nimport express from \"express\";\r\nimport helmet from \"helmet\";\r\nimport hpp from \"hpp\";\r\nimport morgan from \"morgan\";\r\nimport { NODE_ENV, PORT, LOG_FORMAT } from \"@config\";\r\nimport dbConnection from \"./database\"; \r\nimport { ErrorMiddleware } from \"./middlewares/ErrorMiddleware\";\r\nimport { logger, stream } from \"./utils/logger\";\r\nimport Container from \"typedi\";\r\nimport { AUTH_SERVICE_TOKEN } from \"./interfaces/auth/IAuthService.interface\";\r\nimport { AuthService } from \"./services/auth/auth.service\";\r\nimport { AuthRepository } from \"./repositories/auth/auth.repository\";\r\nimport { Routes } from \"./types/routes.interface\";\r\nimport { PROJECT_SERVICE_TOKEN } from \"./interfaces/project/IProjectService\";\r\nimport { ProjectRepository } from \"./repositories/project/project.repository\";\r\nimport { ProjectService } from \"./services/project/project.service\";\r\nimport { TIMESHEET_SERVICE_TOKEN } from \"./interfaces/timesheet/ITimeSheetService.interface\";\r\nimport { TimesheetService } from \"./services/project/timesheet.service\";\r\nimport { TimesheetRepository } from \"./repositories/project/timesheet.repository\";\r\nimport { EMPLOYEE_SERVICE_TOKEN } from \"./interfaces/employee/IEmployeeService\";\r\nimport { EmployeeService } from \"./services/employee/employee.service\";\r\nimport { EmployeeRepository } from \"./repositories/employee/employee.repository\";\r\nimport { LEAVE_SERVICE_TOKEN } from \"./interfaces/leave/ILeaveService.interface\";\r\n\r\nexport class App {\r\n  public app: express.Application;\r\n  public env: string;\r\n  public port: string | number;\r\n\r\n  constructor(routes: Routes[]) {\r\n    this.app = express();\r\n    this.env = NODE_ENV || \"development\";\r\n    this.port = PORT || 3001;\r\n\r\n    this.initializeInterfaces();\r\n    this.connectToDatabase();\r\n\r\n    this.initializeMiddlewares();\r\n    this.initializeRoutes(routes);\r\n    this.initializeErrorHandling();\r\n  }\r\n\r\n  public listen() {\r\n    this.app.listen(this.port, () => {\r\n      logger.info(`=================================`);\r\n      logger.info(`======= ENV: ${this.env} =======`);\r\n      logger.info(`ðŸš€ Identity Service listening on port ${this.port}`);\r\n      logger.info(`=================================`);\r\n    });\r\n  }\r\n\r\n  public getServer() {\r\n    return this.app;\r\n  }\r\n\r\n  public async connectToDatabase() {\r\n    try {\r\n      await dbConnection.authenticate();\r\n      logger.info(\"Database connection established successfully.\");\r\n      console.log(\"Database connection established successfully.\");\r\n\r\n\r\n      await dbConnection.sync({ force: false }); \r\n      logger.info(\"Database tables synced successfully.\");\r\n    } catch (error) {\r\n      logger.error(\"Unable to connect to the database:\", error);\r\n      process.exit(1); \r\n    }\r\n  }\r\n\r\n  private corsOptions = {\r\n    origin: \"*\", \r\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\r\n    allowedHeaders: [\"X-Requested-With\", \"Content-Type\", \"Authorization\"],\r\n    credentials: true, \r\n  };\r\n\r\n  private initializeMiddlewares() {\r\n    this.app.use(morgan(LOG_FORMAT, { stream }));\r\n    this.app.use(hpp());\r\n    this.app.use(helmet());\r\n    this.app.use(helmet.crossOriginResourcePolicy({ policy: \"cross-origin\" }));\r\n    this.app.use(cors(this.corsOptions));\r\n    this.app.use(express.json());\r\n    this.app.use(express.urlencoded({ extended: true }));\r\n    this.app.use(cookieParser());\r\n  }\r\n\r\n\r\n  private initializeInterfaces() {\r\n    Container.set(\r\n      AUTH_SERVICE_TOKEN,\r\n      new AuthService(Container.get(AuthRepository))\r\n    );\r\n    Container.set(\r\n      PROJECT_SERVICE_TOKEN,\r\n      new ProjectService(Container.get(ProjectRepository))\r\n    );\r\n   \r\n    Container.set(\r\n      TIMESHEET_SERVICE_TOKEN,\r\n      new TimesheetService(Container.get(TimesheetRepository))\r\n    );\r\n    Container.set(\r\n      EMPLOYEE_SERVICE_TOKEN,\r\n      new EmployeeService(Container.get(EmployeeRepository))\r\n    );\r\n    Container.set(\r\n      LEAVE_SERVICE_TOKEN,\r\n      new EmployeeService(Container.get(EmployeeRepository))\r\n    );\r\n  }\r\n\r\n  private initializeRoutes(routes: Routes[]) {\r\n    routes.forEach((route) => {\r\n      this.app.use(\"/api\", route.router);\r\n    });\r\n  }\r\n\r\n  private initializeErrorHandling() {\r\n    this.app.use(ErrorMiddleware);\r\n  }\r\n}\r\n"],"names":["App","listen","app","port","logger","info","env","getServer","connectToDatabase","dbConnection","authenticate","console","log","sync","force","error","process","exit","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","hpp","helmet","crossOriginResourcePolicy","policy","cors","corsOptions","express","json","urlencoded","extended","cookieParser","initializeInterfaces","Container","set","AUTH_SERVICE_TOKEN","AuthService","get","AuthRepository","PROJECT_SERVICE_TOKEN","ProjectService","ProjectRepository","TIMESHEET_SERVICE_TOKEN","TimesheetService","TimesheetRepository","EMPLOYEE_SERVICE_TOKEN","EmployeeService","EmployeeRepository","LEAVE_SERVICE_TOKEN","initializeRoutes","routes","forEach","route","router","initializeErrorHandling","ErrorMiddleware","constructor","origin","methods","allowedHeaders","credentials","NODE_ENV","PORT"],"mappings":"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"}