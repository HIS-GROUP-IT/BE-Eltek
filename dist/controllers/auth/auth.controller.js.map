{"version":3,"sources":["../../../src/controllers/auth/auth.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport { Container } from \"typedi\";\r\nimport { AUTH_SERVICE_TOKEN } from \"@/interfaces/auth/IAuthService.interface\";\r\nimport { IUser, IUserLogin, TokenData } from \"@/types/auth.types\";\r\nimport { CustomResponse } from \"@/types/response.interface\";\r\n\r\n\r\nexport class AuthController {\r\n    \r\n    private auth ;\r\n\r\n    constructor () {\r\n        this.auth = Container.get(AUTH_SERVICE_TOKEN); \r\n    }\r\n\r\n    public signup = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const userData: IUser = req.body;\r\n            const signUpUserData = await this.auth.signup(userData);\r\n            const response: CustomResponse<TokenData> = {\r\n                data: signUpUserData,  \r\n                message: \"User registered successfully\",\r\n                error: false\r\n            };\r\n            res.status(201).json(response)\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public login = async (req:Request, res:Response, next:NextFunction) => {\r\n        try {\r\n            const userData : IUserLogin = req.body;\r\n            const loggedInUser = await this.auth.login(userData);\r\n            const response : CustomResponse<TokenData> = {\r\n                data : loggedInUser,\r\n                message : \"User logged in successuflly\",\r\n                error : false\r\n            }\r\n            return res.status(201).json(response);\r\n        } catch (error) {\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    public refreshToken = async (req:Request, res:Response,next:NextFunction)=>{\r\n        try {\r\n            const token : string = req.body.token;\r\n            const newToken = await this.auth.refreshToken(token);\r\n            const response : CustomResponse<TokenData> = {\r\n                data : newToken,\r\n                message : \"Token refreshed sucessfully\",\r\n                error : false\r\n            }            \r\n            return res.status(201).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public Logout = async (req:Request,res:Response , next:NextFunction) => {\r\n        try {\r\n            const token = req.params.token;\r\n            console.log(\"Token\",token)\r\n            const deletedToken = await this.auth.logout(token.toString());\r\n            const response : CustomResponse<null> = {\r\n                data : null,\r\n                message : \"User logged out successfully\",\r\n                error : false\r\n            }            \r\n            return res.status(201).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n    public sendOtp = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n          const { email } = req.body;\r\n          const message = await this.auth.sendOtp(email);\r\n          const response : CustomResponse<null> = {\r\n            data : null,\r\n            message :message,\r\n            error : false\r\n        }            \r\n        return res.status(201).json(response);\r\n        } catch (error) {\r\n          next(error);\r\n        }\r\n      };\r\n\r\n \r\n  public verifyOtp = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const { email, otp } = req.body;\r\n      const message = await this.auth.verifyOtp(email, otp);\r\n      const response : CustomResponse<null> = {\r\n        data : null,\r\n        message :message,\r\n        error : false\r\n    }            \r\n    return res.status(201).json(response);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public updatePassword = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const { email, otp, newPassword } = req.body;\r\n      const updatedUser = await this.auth.updatePassword(email, otp, newPassword);\r\n      const response : CustomResponse<null> = {\r\n        data : updatedUser,\r\n        message : \"User logged out successfully\",\r\n        error : false\r\n    }            \r\n    return res.status(201).json(response);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n}\r\n\r\n\r\n"],"names":["AuthController","constructor","auth","signup","req","res","next","userData","body","signUpUserData","response","data","message","error","status","json","login","loggedInUser","refreshToken","token","newToken","Logout","params","console","log","deletedToken","logout","toString","sendOtp","email","verifyOtp","otp","updatePassword","newPassword","updatedUser","Container","get","AUTH_SERVICE_TOKEN"],"mappings":"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"}