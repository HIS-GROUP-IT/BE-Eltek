{"version":3,"sources":["../../../src/controllers/employee/employee.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport Container from \"typedi\";\r\nimport { IEmployee } from \"@/types/employee.types\";\r\nimport { CustomResponse } from \"@/types/response.interface\";\r\nimport { EMPLOYEE_SERVICE_TOKEN } from \"@/interfaces/employee/IEmployeeService\";\r\nimport { RequestWithUser } from \"@/types/auth.types\";\r\nimport { IProject } from \"@/types/project.types\";\r\n\r\nexport class EmployeeController {\r\n    private employeeService;\r\n\r\n    constructor() {\r\n        this.employeeService = Container.get(EMPLOYEE_SERVICE_TOKEN);\r\n    }\r\n\r\n    public createEmployee = async (req: RequestWithUser, res: Response, next: NextFunction) => {\r\n        try {\r\n            const employeeData: Partial<IEmployee> = req.body;\r\n            const createdBy = Number(req.user.id);\r\n            employeeData.createdBy = createdBy;\r\n            const createdEmployee = await this.employeeService.createEmployee(employeeData);\r\n            const response: CustomResponse<IEmployee> = {\r\n                data: createdEmployee,\r\n                message: \"Employee created successfully\",\r\n                error: false\r\n            };\r\n            res.status(201).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getAllEmployees = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const employees = await this.employeeService.getAllEmployees();\r\n            const response: CustomResponse<IEmployee[]> = {\r\n                data: employees,\r\n                message: \"Employees retrieved successfully\",\r\n                error: false\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getEmployeeById = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const employeeId: number = parseInt(req.params.id);\r\n            const employee = await this.employeeService.getEmployeeById(employeeId);\r\n            const response: CustomResponse<IEmployee> = {\r\n                data: employee,\r\n                message: employee ? \"Employee retrieved successfully\" : \"Employee not found\",\r\n                error: !employee\r\n            };\r\n            res.status(employee ? 200 : 404).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public updateEmployee = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const employeeData: Partial<IEmployee> = req.body;\r\n            const updatedEmployee = await this.employeeService.updateEmployee(employeeData);\r\n            const response: CustomResponse<IEmployee> = {\r\n                data: updatedEmployee,\r\n                message: \"Employee updated successfully\",\r\n                error: false\r\n            };\r\n            res.status(201).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public deleteEmployee = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const employeeId: number = parseInt(req.params.id);\r\n            await this.employeeService.deleteEmployee(employeeId);\r\n            const response: CustomResponse<null> = {\r\n                data: null,\r\n                message: \"Employee deleted successfully\",\r\n                error: false\r\n            };\r\n            res.status(201).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\npublic assignEmployeesToProject = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n        const { employeeIds, projectId } = req.body;\r\n\r\n        if (!employeeIds || !Array.isArray(employeeIds) || employeeIds.length === 0) {\r\n            return res.status(400).json({ message: \"Invalid employee IDs\", error: true });\r\n        }\r\n        if (!projectId || isNaN(projectId)) {\r\n            return res.status(400).json({ message: \"Invalid project ID\", error: true });\r\n        }\r\n        await this.employeeService.assignEmployeesToProject(employeeIds, projectId);\r\n        res.status(201).json({\r\n            data: null,\r\n            message: \"Employees assigned successfully\",\r\n            error: false\r\n        });\r\n    } catch (error) {\r\n        next(error);\r\n    }\r\n};\r\n\r\npublic getEmployeesByProjectId = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const  projectId  = req.params.projectId;  \r\n      const parsedProjectId = Number(projectId);\r\n      if (isNaN(parsedProjectId)) {\r\n        return res.status(400).json({\r\n          message: \"Invalid project ID format\",\r\n          error: true\r\n        });\r\n      }  \r\n      const employees = await this.employeeService.getEmployeesByProjectId(parsedProjectId);  \r\n      const response : CustomResponse<IProject> = {\r\n        data: employees,\r\n        message: \"Employees retrieved successfully\",\r\n        error: false\r\n      }\r\n      res.status(201).json(response);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\npublic getEmployeeProjects = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const employeeId  = req.params.employeeId;\r\n      const parsedEmployeeId = Number(employeeId);  \r\n      if (isNaN(parsedEmployeeId)) {\r\n        return res.status(400).json({ message: \"Invalid employee ID\", error: true });\r\n      }  \r\n      const projects = await this.employeeService.getEmployeeProjects(parsedEmployeeId);\r\n      const response : CustomResponse<IProject> = {\r\n        data: projects,\r\n        message: \"Projects retrieved successfully\",\r\n        error: false\r\n      }\r\n      res.status(201).json(response);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n}\r\n"],"names":["EmployeeController","constructor","employeeService","createEmployee","req","res","next","employeeData","body","createdBy","Number","user","id","createdEmployee","response","data","message","error","status","json","getAllEmployees","employees","getEmployeeById","employeeId","parseInt","params","employee","updateEmployee","updatedEmployee","deleteEmployee","assignEmployeesToProject","employeeIds","projectId","Array","isArray","length","isNaN","getEmployeesByProjectId","parsedProjectId","getEmployeeProjects","parsedEmployeeId","projects","Container","get","EMPLOYEE_SERVICE_TOKEN"],"mappings":"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"}