{"version":3,"sources":["../../../src/controllers/project/project.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport { Container } from \"typedi\";\r\nimport { IProject } from \"@/types/project.types\";\r\nimport { CustomResponse } from \"@/types/response.interface\";\r\nimport { PROJECT_SERVICE_TOKEN } from \"@/interfaces/project/IProjectService\";\r\n\r\nexport class ProjectController {\r\n    private projectService;\r\n\r\n    constructor() {\r\n        this.projectService = Container.get(PROJECT_SERVICE_TOKEN);\r\n    }\r\n\r\n    public createProject = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const projectData: Partial<IProject> = req.body;\r\n            const createdProject = await this.projectService.createProject(projectData);\r\n            const response: CustomResponse<IProject> = {\r\n                data: createdProject,\r\n                message: \"Project created successfully\",\r\n                error: false\r\n            };\r\n            res.status(201).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public updateProject = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const projectData: Partial<IProject> = req.body;\r\n            const updatedProject = await this.projectService.updateProject(projectData);\r\n            const response: CustomResponse<IProject> = {\r\n                data: updatedProject,\r\n                message: \"Project updated successfully\",\r\n                error: false\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public deleteProject = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const projectId: number = parseInt(req.params.projectId);\r\n            await this.projectService.deleteProject(projectId);\r\n            const response: CustomResponse<null> = {\r\n                data: null,\r\n                message: \"Project deleted successfully\",\r\n                error: false\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getAllProjects = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const projects = await this.projectService.getAllProjects();\r\n            const response: CustomResponse<IProject[]> = {\r\n                data: projects,\r\n                message: \"Projects retrieved successfully\",\r\n                error: false\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getProjectById = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const projectId: number = parseInt(req.params.projectId);\r\n            const project = await this.projectService.getProjectById(projectId);\r\n            const response: CustomResponse<IProject> = {\r\n                data: project,\r\n                message: \"Project retrieved successfully\",\r\n                error: false\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\n"],"names":["ProjectController","constructor","projectService","createProject","req","res","next","projectData","body","createdProject","response","data","message","error","status","json","updateProject","updatedProject","deleteProject","projectId","parseInt","params","getAllProjects","projects","getProjectById","project","Container","get","PROJECT_SERVICE_TOKEN"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBALa;iCAGY;;;;;;;;;;;;;;AAE/B,IAAA,AAAMA,oBAAN,MAAMA;IAGTC,aAAc;QAFd,uBAAQC,kBAAR,KAAA;QAMA,uBAAOC,iBAAgB,OAAOC,KAAcC,KAAeC;YACvD,IAAI;gBACA,MAAMC,cAAiCH,IAAII,IAAI;gBAC/C,MAAMC,iBAAiB,MAAM,IAAI,CAACP,cAAc,CAACC,aAAa,CAACI;gBAC/D,MAAMG,WAAqC;oBACvCC,MAAMF;oBACNG,SAAS;oBACTC,OAAO;gBACX;gBACAR,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACL;YACzB,EAAE,OAAOG,OAAO;gBACZP,KAAKO;YACT;QACJ;QAEA,uBAAOG,iBAAgB,OAAOZ,KAAcC,KAAeC;YACvD,IAAI;gBACA,MAAMC,cAAiCH,IAAII,IAAI;gBAC/C,MAAMS,iBAAiB,MAAM,IAAI,CAACf,cAAc,CAACc,aAAa,CAACT;gBAC/D,MAAMG,WAAqC;oBACvCC,MAAMM;oBACNL,SAAS;oBACTC,OAAO;gBACX;gBACAR,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACL;YACzB,EAAE,OAAOG,OAAO;gBACZP,KAAKO;YACT;QACJ;QAEA,uBAAOK,iBAAgB,OAAOd,KAAcC,KAAeC;YACvD,IAAI;gBACA,MAAMa,YAAoBC,SAAShB,IAAIiB,MAAM,CAACF,SAAS;gBACvD,MAAM,IAAI,CAACjB,cAAc,CAACgB,aAAa,CAACC;gBACxC,MAAMT,WAAiC;oBACnCC,MAAM;oBACNC,SAAS;oBACTC,OAAO;gBACX;gBACAR,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACL;YACzB,EAAE,OAAOG,OAAO;gBACZP,KAAKO;YACT;QACJ;QAEA,uBAAOS,kBAAiB,OAAOlB,KAAcC,KAAeC;YACxD,IAAI;gBACA,MAAMiB,WAAW,MAAM,IAAI,CAACrB,cAAc,CAACoB,cAAc;gBACzD,MAAMZ,WAAuC;oBACzCC,MAAMY;oBACNX,SAAS;oBACTC,OAAO;gBACX;gBACAR,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACL;YACzB,EAAE,OAAOG,OAAO;gBACZP,KAAKO;YACT;QACJ;QAEA,uBAAOW,kBAAiB,OAAOpB,KAAcC,KAAeC;YACxD,IAAI;gBACA,MAAMa,YAAoBC,SAAShB,IAAIiB,MAAM,CAACF,SAAS;gBACvD,MAAMM,UAAU,MAAM,IAAI,CAACvB,cAAc,CAACsB,cAAc,CAACL;gBACzD,MAAMT,WAAqC;oBACvCC,MAAMc;oBACNb,SAAS;oBACTC,OAAO;gBACX;gBACAR,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACL;YACzB,EAAE,OAAOG,OAAO;gBACZP,KAAKO;YACT;QACJ;QA3EI,IAAI,CAACX,cAAc,GAAGwB,iBAAS,CAACC,GAAG,CAACC,sCAAqB;IAC7D;AA2EJ"}