{"version":3,"sources":["../../../src/controllers/project/timesheet.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport { Container } from \"typedi\";\r\nimport { CustomResponse } from \"@/types/response.interface\";\r\nimport { ITimeSheet } from \"@/types/timesheet.type\";\r\nimport { TIMESHEET_SERVICE_TOKEN } from \"@/interfaces/timesheet/ITimeSheetService.interface\";\r\nimport { RequestWithUser } from \"@/types/auth.types\";\r\n\r\nexport class TimesheetController {\r\n    private timesheetService;\r\n\r\n    constructor() {\r\n        this.timesheetService = Container.get(TIMESHEET_SERVICE_TOKEN);\r\n    }\r\n\r\n    public createTimesheet = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const timesheetData: Partial<ITimeSheet> = req.body;\r\n            const createdTimesheet = await this.timesheetService.createTimesheet(timesheetData);\r\n            const response: CustomResponse<ITimeSheet> = {\r\n                data: createdTimesheet,\r\n                message: \"Timesheet created successfully\",\r\n                error: false,\r\n            };\r\n            res.status(201).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public updateTimesheet = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n\r\n            const timesheetData: Partial<ITimeSheet> = req.body;\r\n            const updatedTimesheet = await this.timesheetService.updateTimesheet(timesheetData);\r\n            const response: CustomResponse<ITimeSheet> = {\r\n                data: updatedTimesheet,\r\n                message: \"Timesheet updated successfully\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getTimesheetsByUser = async (req: RequestWithUser, res: Response, next: NextFunction) => {\r\n        try {\r\n            const user = req.user;\r\n            const timesheets = await this.timesheetService.getTimesheetsByUser(+user);\r\n            const response: CustomResponse<ITimeSheet[]> = {\r\n                data: timesheets,\r\n                message: \"Timesheets fetched successfully\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getTimesheetsByProject = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const { projectId } = req.params;\r\n            const timesheets = await this.timesheetService.getTimesheetsByProject(+projectId);\r\n            const response: CustomResponse<ITimeSheet[]> = {\r\n                data: timesheets,\r\n                message: \"Timesheets fetched successfully\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getAllTimesheets = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const timesheets = await this.timesheetService.getAllTimesheets();\r\n            const response: CustomResponse<ITimeSheet[]> = {\r\n                data: timesheets,\r\n                message: \"All timesheets fetched successfully\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public deleteTimesheet = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const  timesheetId  = req.params.timesheetId;\r\n            await this.timesheetService.deleteTimesheet(+timesheetId);\r\n            const response: CustomResponse<null> = {\r\n                data: null,\r\n                message: \"Timesheet deleted successfully\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getTimesheetById = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const  id  = req.params.id;\r\n            const timesheet = await this.timesheetService.getTimesheetById(+id);\r\n            const response: CustomResponse<ITimeSheet | null> = {\r\n                data: timesheet,\r\n                message: \"Timesheet fetched successfully\",\r\n                error: false,\r\n            };\r\n            res.status(timesheet ? 200 : 404).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getTimesheetsByDateRange = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const { startDate, endDate } = req.query;\r\n            const timesheets = await this.timesheetService.getTimesheetsByDateRange(\r\n                new Date(startDate as string),\r\n                new Date(endDate as string)\r\n            );\r\n            const response: CustomResponse<ITimeSheet[]> = {\r\n                data: timesheets,\r\n                message: \"Timesheets fetched successfully\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getTimesheetsByUserAndProject = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const { userId, projectId } = req.params;\r\n            const timesheets = await this.timesheetService.getTimesheetsByUserAndProject(+userId, +projectId);\r\n            const response: CustomResponse<ITimeSheet[]> = {\r\n                data: timesheets,\r\n                message: \"Timesheets fetched successfully\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getTotalHoursByUser = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const  userId  = req.params.userId;\r\n            const totalHours = await this.timesheetService.getTotalHoursByUser(+userId);\r\n            const response: CustomResponse<number> = {\r\n                data: totalHours,\r\n                message: \"Total hours calculated\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getTimesheetSummary = async (req: RequestWithUser, res: Response, next: NextFunction) => {\r\n        try {\r\n            const user = req.user.id;\r\n            const { startDate, endDate } = req.query;\r\n            const summary = await this.timesheetService.getTimesheetSummary(\r\n                +user,\r\n                new Date(startDate as string),\r\n                new Date(endDate as string)\r\n            );\r\n            const response: CustomResponse<{projectId: number, totalHours: number}[]> = {\r\n                data: summary,\r\n                message: \"Timesheet summary generated\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public approveTimesheet = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const  id  = req.params.id;\r\n            const approvedTimesheet = await this.timesheetService.approveTimesheet(+id);\r\n            const response: CustomResponse<ITimeSheet> = {\r\n                data: approvedTimesheet,\r\n                message: \"Timesheet approved\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public rejectTimesheet = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const  id  = req.params.id;\r\n            const rejectedTimesheet = await this.timesheetService.rejectTimesheet(+id);\r\n            const response: CustomResponse<ITimeSheet> = {\r\n                data: rejectedTimesheet,\r\n                message: \"Timesheet rejected\",\r\n                error: false,\r\n            };\r\n            res.status(200).json(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\n"],"names":["TimesheetController","constructor","timesheetService","createTimesheet","req","res","next","timesheetData","body","createdTimesheet","response","data","message","error","status","json","updateTimesheet","updatedTimesheet","getTimesheetsByUser","user","timesheets","getTimesheetsByProject","projectId","params","getAllTimesheets","deleteTimesheet","timesheetId","getTimesheetById","id","timesheet","getTimesheetsByDateRange","startDate","endDate","query","Date","getTimesheetsByUserAndProject","userId","getTotalHoursByUser","totalHours","getTimesheetSummary","summary","approveTimesheet","approvedTimesheet","rejectTimesheet","rejectedTimesheet","Container","get","TIMESHEET_SERVICE_TOKEN"],"mappings":"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"}