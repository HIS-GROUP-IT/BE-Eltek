{"version":3,"sources":["../../../src/interfaces/timesheet/ITimeSheetService.interface.ts"],"sourcesContent":["import { ITimeSheet } from \"@/types/timesheet.type\";\r\nimport { Token } from \"typedi\";\r\n\r\nexport interface ITimeSheetService {\r\n    createTimesheet(timesheetData: Partial<ITimeSheet>): Promise<ITimeSheet>;\r\n    updateTimesheet(timesheetData: Partial<ITimeSheet>): Promise<ITimeSheet>;\r\n    getTimesheetsByUser(userId: number): Promise<ITimeSheet[]>;\r\n    getTimesheetsByProject(projectId: number): Promise<ITimeSheet[]>;\r\n    getAllTimesheets(): Promise<ITimeSheet[]>;\r\n    deleteTimesheet(id: number): Promise<void>;\r\n    \r\n\r\n    getTimesheetById(id: number): Promise<ITimeSheet | null>;\r\n    getTimesheetsByDateRange(startDate: Date, endDate: Date): Promise<ITimeSheet[]>;\r\n    getTimesheetsByUserAndProject(userId: number, projectId: number): Promise<ITimeSheet[]>;\r\n    getTotalHoursByUser(userId: number): Promise<number>;\r\n    getTimesheetSummary(\r\n      userId: number, \r\n      startDate: Date, \r\n      endDate: Date\r\n    ): Promise<{ projectId: number; totalHours: number }[]>;\r\n    approveTimesheet(id: number): Promise<ITimeSheet>;\r\n    rejectTimesheet(id: number): Promise<ITimeSheet>;\r\n}\r\n\r\n\r\nexport const TIMESHEET_SERVICE_TOKEN = new Token<ITimeSheetService>(\"ITimeSheetService\");"],"names":["TIMESHEET_SERVICE_TOKEN","Token"],"mappings":";;;;+BA0BaA;;;eAAAA;;;wBAzBS;AAyBf,MAAMA,0BAA0B,IAAIC,aAAK,CAAoB"}