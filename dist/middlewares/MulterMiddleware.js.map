{"version":3,"sources":["../../src/middlewares/MulterMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from \"express\";\r\nimport multer from \"multer\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport { HttpException } from \"@/exceptions/HttpException\";\r\n\r\n// Ensure the uploads directory exists\r\nconst uploadDir = \"uploads/\";\r\nif (!fs.existsSync(uploadDir)) {\r\n    fs.mkdirSync(uploadDir, { recursive: true });\r\n}\r\n\r\n// Configure Multer storage (temporary local storage)\r\nconst storage = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n        cb(null, uploadDir);\r\n    },\r\n    filename: function (req, file, cb) {\r\n        const uniqueName = `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`;\r\n        cb(null, uniqueName);\r\n    }\r\n});\r\n\r\n// File filter: Allow images and videos\r\nconst fileFilter = (req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\r\n    if (file.mimetype.startsWith(\"image\") || file.mimetype.startsWith(\"video\")) {\r\n        cb(null, true);\r\n    } else {\r\n        cb(new HttpException(400, \"Invalid file type. Please upload an image or video.\"));\r\n    }\r\n};\r\n\r\n// Initialize Multer\r\nconst upload = multer({\r\n    storage,\r\n    fileFilter,\r\n    limits: { fileSize: 100 * 1024 * 1024 } // 100MB limit\r\n}).array(\"files\", 10); // Allow up to 10 files\r\n\r\n/**\r\n * Middleware to handle multiple file uploads\r\n */\r\nconst multerMiddleware = (req: Request, res: Response, next: NextFunction) => {\r\n    upload(req, res, (error: any) => {\r\n        if (error instanceof multer.MulterError) {\r\n            return next(new HttpException(400, error.message));\r\n        } else if (error) {\r\n            return next(new HttpException(400, \"Error uploading files.\"));\r\n        }\r\n\r\n        if (!req.files || (req.files as Express.Multer.File[]).length === 0) {\r\n            return next(new HttpException(400, \"No files uploaded\"));\r\n        }\r\n\r\n        next();\r\n    });\r\n};\r\n\r\nexport default multerMiddleware;\r\n\r\n"],"names":["uploadDir","fs","existsSync","mkdirSync","recursive","storage","multer","diskStorage","destination","req","file","cb","filename","uniqueName","fieldname","Date","now","path","extname","originalname","fileFilter","mimetype","startsWith","HttpException","upload","limits","fileSize","array","multerMiddleware","res","next","error","MulterError","message","files","length"],"mappings":";;;;+BA0DA;;;eAAA;;;+DAzDmB;6DACF;2DACF;+BACe;;;;;;AAG9B,MAAMA,YAAY;AAClB,IAAI,CAACC,WAAE,CAACC,UAAU,CAACF,YAAY;IAC3BC,WAAE,CAACE,SAAS,CAACH,WAAW;QAAEI,WAAW;IAAK;AAC9C;AAGA,MAAMC,UAAUC,eAAM,CAACC,WAAW,CAAC;IAC/BC,aAAa,SAAUC,GAAG,EAAEC,IAAI,EAAEC,EAAE;QAChCA,GAAG,MAAMX;IACb;IACAY,UAAU,SAAUH,GAAG,EAAEC,IAAI,EAAEC,EAAE;QAC7B,MAAME,aAAa,GAAGH,KAAKI,SAAS,CAAC,CAAC,EAAEC,KAAKC,GAAG,KAAKC,aAAI,CAACC,OAAO,CAACR,KAAKS,YAAY,GAAG;QACtFR,GAAG,MAAME;IACb;AACJ;AAGA,MAAMO,aAAa,CAACX,KAAcC,MAA2BC;IACzD,IAAID,KAAKW,QAAQ,CAACC,UAAU,CAAC,YAAYZ,KAAKW,QAAQ,CAACC,UAAU,CAAC,UAAU;QACxEX,GAAG,MAAM;IACb,OAAO;QACHA,GAAG,IAAIY,4BAAa,CAAC,KAAK;IAC9B;AACJ;AAGA,MAAMC,SAASlB,IAAAA,eAAM,EAAC;IAClBD;IACAe;IACAK,QAAQ;QAAEC,UAAU,MAAM,OAAO;IAAK;AAC1C,GAAGC,KAAK,CAAC,SAAS;AAKlB,MAAMC,mBAAmB,CAACnB,KAAcoB,KAAeC;IACnDN,OAAOf,KAAKoB,KAAK,CAACE;QACd,IAAIA,iBAAiBzB,eAAM,CAAC0B,WAAW,EAAE;YACrC,OAAOF,KAAK,IAAIP,4BAAa,CAAC,KAAKQ,MAAME,OAAO;QACpD,OAAO,IAAIF,OAAO;YACd,OAAOD,KAAK,IAAIP,4BAAa,CAAC,KAAK;QACvC;QAEA,IAAI,CAACd,IAAIyB,KAAK,IAAI,AAACzB,IAAIyB,KAAK,CAA2BC,MAAM,KAAK,GAAG;YACjE,OAAOL,KAAK,IAAIP,4BAAa,CAAC,KAAK;QACvC;QAEAO;IACJ;AACJ;MAEA,WAAeF"}