{"version":3,"sources":["../../../src/repositories/auth/auth.repository.ts"],"sourcesContent":["import { Service } from \"typedi\";\r\nimport RefreshToken from \"@/models/user/refreshToken.model\";\r\nimport User from \"@/models/user/user.model\";\r\nimport { IUser } from \"@/types/auth.types\";\r\nimport { hash } from \"bcryptjs\";\r\nimport { IAuthRepository } from \"@/interfaces/auth/IAuthRepository .interface\";\r\n\r\n@Service()\r\nexport class AuthRepository implements IAuthRepository {\r\n    public async findUserByEmail(email: string): Promise<IUser | null> {\r\n        return User.findOne({ \r\n            where: { email }, \r\n            attributes: ['id', 'email', 'password', 'role', 'otp'],\r\n            raw: true\r\n        });\r\n    }\r\n    public async saveOtp(email: string, otp: string): Promise<void> {\r\n        const user = await User.findOne({ \r\n            where: { email },\r\n            raw: false \r\n        });\r\n        \r\n        if (user) {\r\n            await user.update({ otp });\r\n        }\r\n    }\r\n\r\n    public async validateOtp(email: string, otp: string): Promise<IUser> {\r\n        return User.findOne({ \r\n            where: { email, otp },\r\n            raw: true\r\n        });\r\n    }\r\n\r\n    public async forgotPassword(email: string, otp: string, newPassword: string): Promise<IUser> {\r\n        const user = await User.findOne({\r\n            where: { email },\r\n            raw: false\r\n        });\r\n        \r\n        if (user) {\r\n            const hashedPassword = await hash(newPassword, 10);\r\n            await user.update({ \r\n                password: hashedPassword,\r\n                otp: ''\r\n            });\r\n            return user.get({ plain: true }); \r\n        }\r\n        throw new Error(\"User not found\");\r\n    }\r\n\r\n    public async findUserById(userId: number): Promise<IUser | null> {\r\n        return User.findByPk(userId, { raw: true });\r\n    }\r\n\r\n    public async createUser(userData: IUser): Promise<IUser> {\r\n        return User.create(userData, { raw: true });\r\n    }\r\n\r\n    public async saveRefreshToken(userId: number, token: string, expiresAt: Date): Promise<void> {\r\n        await RefreshToken.create({ token, userId, expiresAt });\r\n    }\r\n\r\n    public async findRefreshToken(token: string): Promise<RefreshToken | null> {\r\n        return RefreshToken.findOne({ where: { token }, raw: true });\r\n    }\r\n\r\n    public async deleteRefreshToken(token: string): Promise<void> {\r\n        await RefreshToken.destroy({ where: { token } });\r\n    }\r\n}"],"names":["AuthRepository","findUserByEmail","email","User","findOne","where","attributes","raw","saveOtp","otp","user","update","validateOtp","forgotPassword","newPassword","hashedPassword","hash","password","get","plain","Error","findUserById","userId","findByPk","createUser","userData","create","saveRefreshToken","token","expiresAt","RefreshToken","findRefreshToken","deleteRefreshToken","destroy"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARW;0EACC;kEACR;0BAEI;;;;;;;;;;;;AAId,IAAA,AAAMA,iBAAN,MAAMA;IACT,MAAaC,gBAAgBC,KAAa,EAAyB;QAC/D,OAAOC,kBAAI,CAACC,OAAO,CAAC;YAChBC,OAAO;gBAAEH;YAAM;YACfI,YAAY;gBAAC;gBAAM;gBAAS;gBAAY;gBAAQ;aAAM;YACtDC,KAAK;QACT;IACJ;IACA,MAAaC,QAAQN,KAAa,EAAEO,GAAW,EAAiB;QAC5D,MAAMC,OAAO,MAAMP,kBAAI,CAACC,OAAO,CAAC;YAC5BC,OAAO;gBAAEH;YAAM;YACfK,KAAK;QACT;QAEA,IAAIG,MAAM;YACN,MAAMA,KAAKC,MAAM,CAAC;gBAAEF;YAAI;QAC5B;IACJ;IAEA,MAAaG,YAAYV,KAAa,EAAEO,GAAW,EAAkB;QACjE,OAAON,kBAAI,CAACC,OAAO,CAAC;YAChBC,OAAO;gBAAEH;gBAAOO;YAAI;YACpBF,KAAK;QACT;IACJ;IAEA,MAAaM,eAAeX,KAAa,EAAEO,GAAW,EAAEK,WAAmB,EAAkB;QACzF,MAAMJ,OAAO,MAAMP,kBAAI,CAACC,OAAO,CAAC;YAC5BC,OAAO;gBAAEH;YAAM;YACfK,KAAK;QACT;QAEA,IAAIG,MAAM;YACN,MAAMK,iBAAiB,MAAMC,IAAAA,cAAI,EAACF,aAAa;YAC/C,MAAMJ,KAAKC,MAAM,CAAC;gBACdM,UAAUF;gBACVN,KAAK;YACT;YACA,OAAOC,KAAKQ,GAAG,CAAC;gBAAEC,OAAO;YAAK;QAClC;QACA,MAAM,IAAIC,MAAM;IACpB;IAEA,MAAaC,aAAaC,MAAc,EAAyB;QAC7D,OAAOnB,kBAAI,CAACoB,QAAQ,CAACD,QAAQ;YAAEf,KAAK;QAAK;IAC7C;IAEA,MAAaiB,WAAWC,QAAe,EAAkB;QACrD,OAAOtB,kBAAI,CAACuB,MAAM,CAACD,UAAU;YAAElB,KAAK;QAAK;IAC7C;IAEA,MAAaoB,iBAAiBL,MAAc,EAAEM,KAAa,EAAEC,SAAe,EAAiB;QACzF,MAAMC,0BAAY,CAACJ,MAAM,CAAC;YAAEE;YAAON;YAAQO;QAAU;IACzD;IAEA,MAAaE,iBAAiBH,KAAa,EAAgC;QACvE,OAAOE,0BAAY,CAAC1B,OAAO,CAAC;YAAEC,OAAO;gBAAEuB;YAAM;YAAGrB,KAAK;QAAK;IAC9D;IAEA,MAAayB,mBAAmBJ,KAAa,EAAiB;QAC1D,MAAME,0BAAY,CAACG,OAAO,CAAC;YAAE5B,OAAO;gBAAEuB;YAAM;QAAE;IAClD;AACJ"}