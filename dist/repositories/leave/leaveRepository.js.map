{"version":3,"sources":["../../../src/repositories/leave/leaveRepository.ts"],"sourcesContent":["import { Service } from \"typedi\";\r\nimport { HttpException } from \"@/exceptions/HttpException\";\r\nimport { ILeaveRepository } from \"@/interfaces/leave/ILeaveRepository.interface\";\r\nimport { ILeave, LeaveStatus } from \"@/types/leave.types\";\r\nimport Leave from \"@/models/leave/leave.model\";\r\nimport Employee from \"@/models/employee/employee.model\";\r\n\r\n@Service()\r\nexport class LeaveRepository implements ILeaveRepository {\r\n    public async createLeave(leaveData: Partial<ILeave>): Promise<ILeave> {\r\n        try {\r\n            const leave = await Leave.create(leaveData);\r\n            return leave.get({ plain: true });\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error creating leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async updateLeave(leaveData: Partial<ILeave>): Promise<ILeave> {\r\n        try {\r\n            const leave = await Leave.findByPk(leaveData.id, { raw: true });\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n            \r\n            const [affectedCount] = await Leave.update(leaveData, {\r\n                where: { id: leaveData.id },\r\n                returning: true\r\n            });\r\n            \r\n            if (affectedCount === 0) throw new HttpException(404, \"Leave not found\");\r\n            return this.getLeave(leaveData.id);\r\n        } catch (error) {\r\n            if (error instanceof HttpException) throw error;\r\n            throw new HttpException(500, `Error updating leave: ${error.message}`);\r\n        }\r\n    }\r\n    public async approveLeave(leaveId: number): Promise<void> {\r\n        try {\r\n            const leave = await Leave.findByPk(leaveId);\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n    \r\n            if (leave.status !== LeaveStatus.PENDING) {\r\n                throw new HttpException(400, \"Leave request has already been processed\");\r\n            }\r\n    \r\n            await leave.update({ status: LeaveStatus.APPROVED });\r\n        } catch (error) {\r\n            if (error instanceof HttpException) throw error;\r\n            throw new HttpException(500, `Error approving leave: ${error.message}`);\r\n        }\r\n    }\r\n    \r\n    public async rejectLeave(leaveId: number): Promise<void> {\r\n        try {\r\n            const leave = await Leave.findByPk(leaveId);\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n    \r\n            if (leave.status !== LeaveStatus.PENDING) {\r\n                throw new HttpException(400, \"Leave request has already been processed\");\r\n            }\r\n    \r\n            await leave.update({ status: LeaveStatus.REJECTED });\r\n        } catch (error) {\r\n            if (error instanceof HttpException) throw error;\r\n            throw new HttpException(500, `Error rejecting leave: ${error.message}`);\r\n        }\r\n    }\r\n    \r\n\r\n    public async getAllLeaves(): Promise<ILeave[]> {\r\n        try {\r\n            const leaves = await Leave.findAll({\r\n                include: [{\r\n                    model: Employee,\r\n                    as: 'employee',\r\n                    attributes: ['id', 'fullName', 'email']\r\n                }],\r\n                order: [['createdAt', 'DESC']],\r\n                raw: true,\r\n                nest: true\r\n            });\r\n            \r\n            return leaves;\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error fetching leaves: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async getLeave(leaveId: number): Promise<ILeave> {\r\n        try {\r\n            const leave = await Leave.findByPk(leaveId, {\r\n                include: [{\r\n                    model: Employee,\r\n                    as: 'employee',\r\n                    attributes: ['id', 'fullName', 'email']\r\n                }],\r\n                raw: true,\r\n                nest: true\r\n            });\r\n            \r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n            return leave;\r\n        } catch (error) {\r\n            if (error instanceof HttpException) throw error;\r\n            throw new HttpException(500, `Error fetching leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async getLeaveByEmployeeId(userId: number, leaveId: number): Promise<ILeave> {\r\n        try {\r\n            const leave = await Leave.findOne({\r\n                where: { id: leaveId, employeeId: userId },\r\n                include: [{\r\n                    model: Employee,\r\n                    as: 'employee',\r\n                    attributes: ['id', 'fullName', 'email']\r\n                }],\r\n                raw: true,\r\n                nest: true\r\n            });\r\n            \r\n            if (!leave) throw new HttpException(404, \"Leave not found for this user\");\r\n            return leave;\r\n        } catch (error) {\r\n            if (error instanceof HttpException) throw error;\r\n            throw new HttpException(500, `Error fetching user leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async deleteLeave(leaveId: number): Promise<void> {\r\n        try {\r\n            const affectedCount = await Leave.destroy({ where: { id: leaveId } });\r\n            if (affectedCount === 0) throw new HttpException(404, \"Leave not found\");\r\n        } catch (error) {\r\n            if (error instanceof HttpException) throw error;\r\n            throw new HttpException(500, `Error deleting leave: ${error.message}`);\r\n        }\r\n    }\r\n}"],"names":["LeaveRepository","createLeave","leaveData","leave","Leave","create","get","plain","error","HttpException","message","updateLeave","findByPk","id","raw","affectedCount","update","where","returning","getLeave","approveLeave","leaveId","status","LeaveStatus","PENDING","APPROVED","rejectLeave","REJECTED","getAllLeaves","leaves","findAll","include","model","Employee","as","attributes","order","nest","getLeaveByEmployeeId","userId","findOne","employeeId","deleteLeave","destroy"],"mappings":"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"}