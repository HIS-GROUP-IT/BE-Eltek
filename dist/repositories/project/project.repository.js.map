{"version":3,"sources":["../../../src/repositories/project/project.repository.ts"],"sourcesContent":["import { Service } from \"typedi\";\r\nimport { IProjectRepository } from \"@/interfaces/project/IProjectRepository.interface\";\r\nimport { IProject } from \"@/types/project.types\";\r\nimport Project from \"@/models/project/project.model\";\r\nimport Employee from \"@/models/employee/employee.model\"; \r\n\r\n\r\n@Service()\r\nexport class ProjectRepository implements IProjectRepository {\r\n    public async createProject(projectData: Partial<IProject>): Promise<IProject> {\r\n        const project = await Project.create(projectData);\r\n        return project.get({ plain: true });\r\n    }\r\n\r\n    public async updateProject(projectData: Partial<IProject>): Promise<IProject> {\r\n        const project = await Project.findByPk(projectData.id);\r\n        if (!project) throw new Error(\"Project not found\");\r\n        await project.update(projectData);\r\n        return project.get({ plain: true });\r\n    }\r\n\r\n    public async deleteProject(projectId: number): Promise<void> {\r\n        const project = await Project.findByPk(projectId);\r\n        if (!project) throw new Error(\"Project not found\");\r\n        await project.destroy();\r\n    }\r\n\r\n    public async getAllProjects(): Promise<IProject[]> {\r\n        const projects = await Project.findAll({\r\n            order: [['createdAt', 'DESC']],\r\n            raw: true\r\n        });\r\n        return projects;\r\n    }\r\n\r\n    public async getProjectById(projectId: number): Promise<IProject | null> {\r\n        const project = await Project.findByPk(projectId, {\r\n            include: [{\r\n                model: Employee,\r\n                as: 'employees', \r\n                attributes: ['id', 'fullName', 'email'] \r\n            }],\r\n            raw: true,\r\n            nest: true\r\n        });\r\n        return project;\r\n    }\r\n\r\n    public async getProjectsByEmployee(employeeId: number): Promise<IProject[]> {\r\n        const employee = await Employee.findByPk(employeeId, {\r\n            include: [{\r\n                model: Project,\r\n                as: 'projects',\r\n                through: { attributes: [] }, \r\n                attributes: ['id', 'name']\r\n            }]\r\n        });\r\n\r\n        if (!employee) throw new Error(\"Employee not found\");\r\n\r\n        return employee.projects;  \r\n    }\r\n}\r\n"],"names":["ProjectRepository","createProject","projectData","project","Project","create","get","plain","updateProject","findByPk","id","Error","update","deleteProject","projectId","destroy","getAllProjects","projects","findAll","order","raw","getProjectById","include","model","Employee","as","attributes","nest","getProjectsByEmployee","employeeId","employee","through"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARW;qEAGJ;sEACC;;;;;;;;;;;;AAId,IAAA,AAAMA,oBAAN,MAAMA;IACT,MAAaC,cAAcC,WAA8B,EAAqB;QAC1E,MAAMC,UAAU,MAAMC,qBAAO,CAACC,MAAM,CAACH;QACrC,OAAOC,QAAQG,GAAG,CAAC;YAAEC,OAAO;QAAK;IACrC;IAEA,MAAaC,cAAcN,WAA8B,EAAqB;QAC1E,MAAMC,UAAU,MAAMC,qBAAO,CAACK,QAAQ,CAACP,YAAYQ,EAAE;QACrD,IAAI,CAACP,SAAS,MAAM,IAAIQ,MAAM;QAC9B,MAAMR,QAAQS,MAAM,CAACV;QACrB,OAAOC,QAAQG,GAAG,CAAC;YAAEC,OAAO;QAAK;IACrC;IAEA,MAAaM,cAAcC,SAAiB,EAAiB;QACzD,MAAMX,UAAU,MAAMC,qBAAO,CAACK,QAAQ,CAACK;QACvC,IAAI,CAACX,SAAS,MAAM,IAAIQ,MAAM;QAC9B,MAAMR,QAAQY,OAAO;IACzB;IAEA,MAAaC,iBAAsC;QAC/C,MAAMC,WAAW,MAAMb,qBAAO,CAACc,OAAO,CAAC;YACnCC,OAAO;gBAAC;oBAAC;oBAAa;iBAAO;aAAC;YAC9BC,KAAK;QACT;QACA,OAAOH;IACX;IAEA,MAAaI,eAAeP,SAAiB,EAA4B;QACrE,MAAMX,UAAU,MAAMC,qBAAO,CAACK,QAAQ,CAACK,WAAW;YAC9CQ,SAAS;gBAAC;oBACNC,OAAOC,sBAAQ;oBACfC,IAAI;oBACJC,YAAY;wBAAC;wBAAM;wBAAY;qBAAQ;gBAC3C;aAAE;YACFN,KAAK;YACLO,MAAM;QACV;QACA,OAAOxB;IACX;IAEA,MAAayB,sBAAsBC,UAAkB,EAAuB;QACxE,MAAMC,WAAW,MAAMN,sBAAQ,CAACf,QAAQ,CAACoB,YAAY;YACjDP,SAAS;gBAAC;oBACNC,OAAOnB,qBAAO;oBACdqB,IAAI;oBACJM,SAAS;wBAAEL,YAAY,EAAE;oBAAC;oBAC1BA,YAAY;wBAAC;wBAAM;qBAAO;gBAC9B;aAAE;QACN;QAEA,IAAI,CAACI,UAAU,MAAM,IAAInB,MAAM;QAE/B,OAAOmB,SAASb,QAAQ;IAC5B;AACJ"}