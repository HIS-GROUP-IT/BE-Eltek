{"version":3,"sources":["../../../src/repositories/project/timesheet.repository.ts"],"sourcesContent":["import { Service } from \"typedi\";\r\nimport { ITimeSheet } from \"@/types/timesheet.type\";\r\nimport { ITimeSheetRepository } from \"@/interfaces/timesheet/ITimeSheetRepository.interface\";\r\nimport { Timesheet } from \"@/models/project/timesheet.model\";\r\nimport { Op, Sequelize } from \"sequelize\";\r\n\r\n@Service()\r\nexport class TimesheetRepository implements ITimeSheetRepository {\r\n    public async createTimesheet(timesheetData: Partial<ITimeSheet>): Promise<ITimeSheet> {\r\n        const timesheet = await Timesheet.create(timesheetData);\r\n        return timesheet.get({ plain: true });\r\n    }\r\n\r\n    public async updateTimesheet(timesheetData: Partial<ITimeSheet>): Promise<ITimeSheet> {\r\n        const timesheet = await Timesheet.findByPk(timesheetData.id);\r\n        if (!timesheet) throw new Error(\"Timesheet not found\");\r\n        await timesheet.update(timesheetData);\r\n        return timesheet.get({ plain: true });\r\n    }\r\n\r\n    public async getTimesheetsByUser(userId: number): Promise<ITimeSheet[]> {\r\n        return await Timesheet.findAll({ \r\n            where: { userId },\r\n            raw: true,\r\n            order: [['date', 'DESC']]\r\n        });\r\n    }\r\n\r\n    public async getTimesheetsByProject(projectId: number): Promise<ITimeSheet[]> {\r\n        return await Timesheet.findAll({ \r\n            where: { projectId },\r\n            raw: true,\r\n            order: [['date', 'DESC']]\r\n        });\r\n    }\r\n\r\n    public async getAllTimesheets(): Promise<ITimeSheet[]> {\r\n        return await Timesheet.findAll({\r\n            raw: true,\r\n            order: [['date', 'DESC']]\r\n        });\r\n    }\r\n\r\n    public async deleteTimesheet(id: number): Promise<void> {\r\n        const timesheet = await Timesheet.findByPk(id);\r\n        if (!timesheet) throw new Error(\"Timesheet not found\");\r\n        await timesheet.destroy();\r\n    }\r\n\r\n    public async getTimesheetById(id: number): Promise<ITimeSheet | null> {\r\n        return await Timesheet.findByPk(id, { raw: true });\r\n    }\r\n\r\n    public async getTimesheetsByDateRange(startDate: Date, endDate: Date): Promise<ITimeSheet[]> {\r\n        return await Timesheet.findAll({\r\n            where: {\r\n                date: {\r\n                    [Op.between]: [startDate, endDate]\r\n                }\r\n            },\r\n            raw: true,\r\n            order: [['date', 'ASC']]\r\n        });\r\n    }\r\n\r\n    public async getTimesheetsByUserAndProject(userId: number, projectId: number): Promise<ITimeSheet[]> {\r\n        return await Timesheet.findAll({\r\n            where: { userId, projectId },\r\n            raw: true,\r\n            order: [['date', 'DESC']]\r\n        });\r\n    }\r\n\r\n    public async getTotalHoursByUser(userId: number): Promise<number> {\r\n        const result = await Timesheet.findOne({\r\n            where: { userId },\r\n            attributes: [\r\n                [Sequelize.fn('SUM', Sequelize.col('hours')), 'totalHours']\r\n            ],\r\n            raw: true\r\n        });\r\n        return result?.hours || 0;\r\n    }\r\n\r\n    public async getTimesheetSummary(userId: number, startDate: Date, endDate: Date): Promise<{projectId: number, totalHours: number}[]> {\r\n        return await Timesheet.findAll({\r\n            where: {\r\n                userId,\r\n                date: {\r\n                    [Op.between]: [startDate, endDate]\r\n                }\r\n            },\r\n            attributes: [\r\n                'projectId',\r\n                [Sequelize.fn('SUM', Sequelize.col('hours')), 'totalHours']\r\n            ],\r\n            group: ['projectId'],\r\n            raw: true\r\n        }) as unknown as {projectId: number, totalHours: number}[];\r\n    }\r\n\r\n    public async approveTimesheet(id: number): Promise<ITimeSheet> {\r\n        const timesheet = await Timesheet.findByPk(id);\r\n        if (!timesheet) throw new Error(\"Timesheet not found\");\r\n        await timesheet.update({ status: 'approved' });\r\n        return timesheet.get({ plain: true });\r\n    }\r\n\r\n    public async rejectTimesheet(id: number): Promise<ITimeSheet> {\r\n        const timesheet = await Timesheet.findByPk(id);\r\n        if (!timesheet) throw new Error(\"Timesheet not found\");\r\n        await timesheet.update({ status: 'rejected' });\r\n        return timesheet.get({ plain: true });\r\n    }\r\n}"],"names":["TimesheetRepository","createTimesheet","timesheetData","timesheet","Timesheet","create","get","plain","updateTimesheet","findByPk","id","Error","update","getTimesheetsByUser","userId","findAll","where","raw","order","getTimesheetsByProject","projectId","getAllTimesheets","deleteTimesheet","destroy","getTimesheetById","getTimesheetsByDateRange","startDate","endDate","date","Op","between","getTimesheetsByUserAndProject","getTotalHoursByUser","result","findOne","attributes","Sequelize","fn","col","hours","getTimesheetSummary","group","approveTimesheet","status","rejectTimesheet"],"mappings":"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"}