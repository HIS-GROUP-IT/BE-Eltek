{"version":3,"sources":["../src/server.ts"],"sourcesContent":["import serverless from \"serverless-http\";\r\nimport { App } from \"./app\";\r\nimport { AuthRoute } from \"./routes/auth/auth.route\";\r\nimport { ProjectRoute } from \"./routes/project/project.routes\";\r\nimport { TimesheetRoute } from \"./routes/project/timesheet.routes\";\r\nimport { ValidateEnv } from \"./utils/validateEnv\";\r\nimport { APIGatewayProxyEvent, APIGatewayProxyResult, Context } from \"aws-lambda\";\r\nimport { EmployeeRoute } from \"./routes/employee/employee.routes\";\r\n\r\nValidateEnv();\r\n\r\nconst app = new App([\r\n  new AuthRoute(),\r\n  new ProjectRoute(),\r\n  new EmployeeRoute(),\r\n  new TimesheetRoute()\r\n]);\r\n\r\nconst serverlessApp = serverless(app.getServer());\r\napp.listen();\r\n\r\nconst CORS_HEADERS = {\r\n  \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\r\n  \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\r\n  \"Access-Control-Allow-Credentials\": \"true\",\r\n  \"Content-Encoding\": \"identity\"\r\n};\r\n\r\nexport const handler = async (\r\n  event: APIGatewayProxyEvent,\r\n  context: Context\r\n): Promise<APIGatewayProxyResult> => {\r\n  try {\r\n    if (event.httpMethod === \"OPTIONS\") {\r\n      return {\r\n        statusCode: 204,\r\n        headers: CORS_HEADERS,\r\n        body: \"\",\r\n        isBase64Encoded: false\r\n      };\r\n    }\r\n\r\n    const response = await serverlessApp(event, context) as APIGatewayProxyResult;\r\n\r\n    const isCompressed = response.headers?.['x-compressed'] === 'true';\r\n    const shouldEncodeAsBase64 = isCompressed;\r\n\r\n    return {\r\n      statusCode: response.statusCode || 200,\r\n      headers: {\r\n        ...CORS_HEADERS,\r\n        ...response.headers,\r\n        ...(isCompressed ? { 'Content-Encoding': 'gzip' } : {}),\r\n        ...(response.headers?.['x-compressed'] ? {} : {})\r\n      },\r\n      body: shouldEncodeAsBase64 \r\n        ? Buffer.from(response.body, 'binary').toString('base64')\r\n        : response.body,\r\n      isBase64Encoded: shouldEncodeAsBase64\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error:\", error);\r\n    return {\r\n      statusCode: 500,\r\n      headers: {\r\n        ...CORS_HEADERS,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ message: \"Internal Server Error\" }),\r\n      isBase64Encoded: false\r\n    };\r\n  }\r\n};"],"names":["handler","ValidateEnv","app","App","AuthRoute","ProjectRoute","EmployeeRoute","TimesheetRoute","serverlessApp","serverless","getServer","listen","CORS_HEADERS","event","context","response","httpMethod","statusCode","headers","body","isBase64Encoded","isCompressed","shouldEncodeAsBase64","Buffer","from","toString","error","console","JSON","stringify","message"],"mappings":";;;;+BA4BaA;;;eAAAA;;;uEA5BU;qBACH;2BACM;+BACG;iCACE;6BACH;gCAEE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE9BC,IAAAA,wBAAW;AAEX,MAAMC,MAAM,IAAIC,QAAG,CAAC;IAClB,IAAIC,oBAAS;IACb,IAAIC,2BAAY;IAChB,IAAIC,6BAAa;IACjB,IAAIC,+BAAc;CACnB;AAED,MAAMC,gBAAgBC,IAAAA,uBAAU,EAACP,IAAIQ,SAAS;AAC9CR,IAAIS,MAAM;AAEV,MAAMC,eAAe;IACnB,gCAAgC;IAChC,gCAAgC;IAChC,oCAAoC;IACpC,oBAAoB;AACtB;AAEO,MAAMZ,UAAU,OACrBa,OACAC;IAEA,IAAI;YAYmBC,mBASbA;QApBR,IAAIF,MAAMG,UAAU,KAAK,WAAW;YAClC,OAAO;gBACLC,YAAY;gBACZC,SAASN;gBACTO,MAAM;gBACNC,iBAAiB;YACnB;QACF;QAEA,MAAML,WAAW,MAAMP,cAAcK,OAAOC;QAE5C,MAAMO,eAAeN,EAAAA,oBAAAA,SAASG,OAAO,cAAhBH,wCAAAA,iBAAkB,CAAC,eAAe,MAAK;QAC5D,MAAMO,uBAAuBD;QAE7B,OAAO;YACLJ,YAAYF,SAASE,UAAU,IAAI;YACnCC,SAAS,mBACJN,cACAG,SAASG,OAAO,EACfG,eAAe;gBAAE,oBAAoB;YAAO,IAAI,CAAC,GACjDN,EAAAA,qBAAAA,SAASG,OAAO,cAAhBH,yCAAAA,kBAAkB,CAAC,eAAe,IAAG,CAAC,IAAI,CAAC;YAEjDI,MAAMG,uBACFC,OAAOC,IAAI,CAACT,SAASI,IAAI,EAAE,UAAUM,QAAQ,CAAC,YAC9CV,SAASI,IAAI;YACjBC,iBAAiBE;QACnB;IAEF,EAAE,OAAOI,OAAO;QACdC,QAAQD,KAAK,CAAC,UAAUA;QACxB,OAAO;YACLT,YAAY;YACZC,SAAS,wCACJN;gBACH,gBAAgB;;YAElBO,MAAMS,KAAKC,SAAS,CAAC;gBAAEC,SAAS;YAAwB;YACxDV,iBAAiB;QACnB;IACF;AACF"}