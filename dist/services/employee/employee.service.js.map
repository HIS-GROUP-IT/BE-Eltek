{"version":3,"sources":["../../../src/services/employee/employee.service.ts"],"sourcesContent":["import { IEmployee } from '@/types/employee.types';\r\nimport { Service } from 'typedi';\r\nimport { EMPLOYEE_SERVICE_TOKEN, IEmployeeService } from '@/interfaces/employee/IEmployeeService';\r\nimport { EmployeeRepository } from '@/repositories/employee/employee.repository';\r\nimport { HttpException } from '@/exceptions/HttpException';\r\nimport { IProject } from '@/types/project.types';\r\n\r\n\r\n@Service({id: EMPLOYEE_SERVICE_TOKEN, type: EmployeeService})\r\nexport class EmployeeService implements IEmployeeService {\r\n\r\n    constructor(\r\n        private employeeRepository: EmployeeRepository,\r\n    ) {}\r\n\r\n    public async createEmployee(employeeData: IEmployee): Promise<IEmployee> {\r\n      try {\r\n        return await this.employeeRepository.createEmployee(employeeData);\r\n      } catch (error) {\r\n        throw new HttpException(400, \"Error creating employee\");\r\n      }\r\n    }\r\n\r\n    public async getAllEmployees(): Promise<IEmployee[]> {\r\n      try {\r\n        return await this.employeeRepository.getAllEmployees();\r\n      } catch (error) {\r\n        throw new HttpException(500, \"Error getting employees\");\r\n      }\r\n    }\r\n\r\n    public async getEmployeeById(id: number): Promise<IEmployee | null> {\r\n      try {\r\n        return await this.employeeRepository.getEmployeeById(id);\r\n      } catch (error) {\r\n        throw new HttpException(500, \"Error retrieving employee\");\r\n      }\r\n    }\r\n\r\n    public async updateEmployee(employeeData: Partial<IEmployee>): Promise<IEmployee> {\r\n      try {\r\n        return await this.employeeRepository.updateEmployee(employeeData);\r\n      } catch (error) {\r\n        throw new HttpException(400, \"Error updating employee\");\r\n      }\r\n    }\r\n\r\n    public async deleteEmployee(id: number): Promise<void> {\r\n      try {\r\n        await this.employeeRepository.deleteEmployee(id);\r\n      } catch (error) {\r\n        throw new HttpException(400, \"Error deleting employee\");\r\n      }\r\n    }\r\n\r\n    public async assignEmployeesToProject(employeeIds: number[], projectId: number): Promise<void> {\r\n      try {\r\n        const assignEmployees = await this.employeeRepository.assignEmployeesToProject(employeeIds,projectId);       \r\n        return assignEmployees;      \r\n      } catch (error) {\r\n        throw new HttpException(500, \"Error assigning employees to project\");\r\n      }\r\n    }\r\n\r\n    public async getEmployeesByProjectId(projectId: number): Promise<IEmployee[]> {\r\n      try {\r\n        const fetchedEmployees = await this.employeeRepository.getEmployeesByProjectId(projectId);\r\n        return fetchedEmployees;\r\n      } catch (error) {\r\n        throw new HttpException(404, `No employees found for Project ID : ${projectId}`);\r\n      }\r\n    }\r\n\r\n    public async getEmployeeProjects(employeeId: number): Promise<IProject[]> {\r\n      try {\r\n        const fetchedProjects = await this.employeeRepository.getEmployeeProjects(employeeId);\r\n        return fetchedProjects;\r\n      } catch (error) {\r\n        throw new HttpException(404, `No Projects for employee ID: ${employeeId}`);\r\n      }\r\n    }\r\n  \r\n}\r\n"],"names":["EmployeeService","createEmployee","employeeData","employeeRepository","error","HttpException","getAllEmployees","getEmployeeById","id","updateEmployee","deleteEmployee","assignEmployeesToProject","employeeIds","projectId","assignEmployees","getEmployeesByProjectId","fetchedEmployees","getEmployeeProjects","employeeId","fetchedProjects","constructor","EMPLOYEE_SERVICE_TOKEN","type"],"mappings":";;;;+BASaA;;;eAAAA;;;wBARW;kCACiC;oCACtB;+BACL;;;;;;;;;;;;;;;;;;;;;;;AAKvB,IAAA,AAAMA,kBAAN,MAAMA;IAMT,MAAaC,eAAeC,YAAuB,EAAsB;QACvE,IAAI;YACF,OAAO,MAAM,IAAI,CAACC,kBAAkB,CAACF,cAAc,CAACC;QACtD,EAAE,OAAOE,OAAO;YACd,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;IACF;IAEA,MAAaC,kBAAwC;QACnD,IAAI;YACF,OAAO,MAAM,IAAI,CAACH,kBAAkB,CAACG,eAAe;QACtD,EAAE,OAAOF,OAAO;YACd,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;IACF;IAEA,MAAaE,gBAAgBC,EAAU,EAA6B;QAClE,IAAI;YACF,OAAO,MAAM,IAAI,CAACL,kBAAkB,CAACI,eAAe,CAACC;QACvD,EAAE,OAAOJ,OAAO;YACd,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;IACF;IAEA,MAAaI,eAAeP,YAAgC,EAAsB;QAChF,IAAI;YACF,OAAO,MAAM,IAAI,CAACC,kBAAkB,CAACM,cAAc,CAACP;QACtD,EAAE,OAAOE,OAAO;YACd,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;IACF;IAEA,MAAaK,eAAeF,EAAU,EAAiB;QACrD,IAAI;YACF,MAAM,IAAI,CAACL,kBAAkB,CAACO,cAAc,CAACF;QAC/C,EAAE,OAAOJ,OAAO;YACd,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;IACF;IAEA,MAAaM,yBAAyBC,WAAqB,EAAEC,SAAiB,EAAiB;QAC7F,IAAI;YACF,MAAMC,kBAAkB,MAAM,IAAI,CAACX,kBAAkB,CAACQ,wBAAwB,CAACC,aAAYC;YAC3F,OAAOC;QACT,EAAE,OAAOV,OAAO;YACd,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;IACF;IAEA,MAAaU,wBAAwBF,SAAiB,EAAwB;QAC5E,IAAI;YACF,MAAMG,mBAAmB,MAAM,IAAI,CAACb,kBAAkB,CAACY,uBAAuB,CAACF;YAC/E,OAAOG;QACT,EAAE,OAAOZ,OAAO;YACd,MAAM,IAAIC,4BAAa,CAAC,KAAK,CAAC,oCAAoC,EAAEQ,WAAW;QACjF;IACF;IAEA,MAAaI,oBAAoBC,UAAkB,EAAuB;QACxE,IAAI;YACF,MAAMC,kBAAkB,MAAM,IAAI,CAAChB,kBAAkB,CAACc,mBAAmB,CAACC;YAC1E,OAAOC;QACT,EAAE,OAAOf,OAAO;YACd,MAAM,IAAIC,4BAAa,CAAC,KAAK,CAAC,6BAA6B,EAAEa,YAAY;QAC3E;IACF;IArEAE,YACI,AAAQjB,kBAAsC,CAChD;;aADUA,qBAAAA;IACT;AAqEP;;;QA1EUK,IAAIa,wCAAsB;QAAEC,MAAMtB"}