{"version":3,"sources":["../../../src/services/leave/leave.service.ts"],"sourcesContent":["import { Service } from \"typedi\";\r\nimport { ILeaveService, LEAVE_SERVICE_TOKEN } from \"@/interfaces/leave/ILeaveService.interface\";\r\nimport { ILeave, LeaveStatus } from \"@/types/leave.types\";\r\nimport { HttpException } from \"@/exceptions/HttpException\"; \r\nimport { LeaveRepository } from \"@/repositories/leave/leaveRepository\";\r\n\r\n\r\n@Service({ id: LEAVE_SERVICE_TOKEN, type: LeaveService })\r\nexport class LeaveService implements ILeaveService {\r\n    constructor(private leaveRepository: LeaveRepository) {}\r\n\r\n    public async createLeave(leaveData: ILeave): Promise<ILeave> {\r\n        try {\r\n            return await this.leaveRepository.createLeave(leaveData);\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error creating leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async updateLeave(leaveData: Partial<ILeave>): Promise<ILeave> {\r\n        try {\r\n            const leave = await this.leaveRepository.getLeave(leaveData.id);\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n\r\n            return await this.leaveRepository.updateLeave(leaveData);\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error updating leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async deleteLeave(leaveId: number): Promise<void> {\r\n        try {\r\n            const leave = await this.leaveRepository.getLeave(leaveId);\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n\r\n            await this.leaveRepository.deleteLeave(leaveId);\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error deleting leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async getLeaveById(leaveId: number): Promise<ILeave | null> {\r\n        try {\r\n            const leave = await this.leaveRepository.getLeave(leaveId);\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n\r\n            return leave;\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error retrieving leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async getAllLeaves(): Promise<ILeave[]> {\r\n        try {\r\n            return await this.leaveRepository.getAllLeaves();\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error retrieving leaves: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async approveLeave(leaveId: number): Promise<void> {\r\n        try {\r\n            const leave = await this.leaveRepository.getLeave(leaveId);\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n\r\n            if (leave.status !== LeaveStatus.PENDING) {\r\n                throw new HttpException(400, \"Leave request has already been processed\");\r\n            }\r\n\r\n            await this.leaveRepository.approveLeave(leaveId);\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error approving leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async rejectLeave(leaveId: number): Promise<void> {\r\n        try {\r\n            const leave = await this.leaveRepository.getLeave(leaveId);\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n\r\n            if (leave.status !== LeaveStatus.PENDING) {\r\n                throw new HttpException(400, \"Leave request has already been processed\");\r\n            }\r\n\r\n            await this.leaveRepository.rejectLeave(leaveId);\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error rejecting leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async getLeave(leaveId: number): Promise<ILeave> {\r\n        try {\r\n            const leave = await this.leaveRepository.getLeave(leaveId);\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n\r\n            return leave\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error getting leave: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async getLeaveByEmployeeId(employeeId: number): Promise<ILeave> {\r\n        try {\r\n            const leave = await this.leaveRepository.getLeave(employeeId);\r\n            if (!leave) throw new HttpException(404, \"Leave not found\");\r\n\r\n            return leave\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error getting leave: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n"],"names":["LeaveService","createLeave","leaveData","leaveRepository","error","HttpException","message","updateLeave","leave","getLeave","id","deleteLeave","leaveId","getLeaveById","getAllLeaves","approveLeave","status","LeaveStatus","PENDING","rejectLeave","getLeaveByEmployeeId","employeeId","constructor","LEAVE_SERVICE_TOKEN","type"],"mappings":"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"}