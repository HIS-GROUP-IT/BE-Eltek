{"version":3,"sources":["../../../src/services/project/project.service.ts"],"sourcesContent":["import { Service } from \"typedi\";\r\nimport { IProject } from \"@/types/project.types\";\r\nimport { HttpException } from \"@/exceptions/HttpException\"; // Custom Exception handling class\r\nimport { IProjectService, PROJECT_SERVICE_TOKEN } from \"@/interfaces/project/IProjectService\";\r\nimport { ProjectRepository } from \"@/repositories/project/project.repository\";\r\n\r\n@Service({ id: PROJECT_SERVICE_TOKEN, type: ProjectService })\r\nexport class ProjectService implements IProjectService {\r\n    constructor(private projectRepository: ProjectRepository) {}\r\n\r\n    public async createProject(projectData: Partial<IProject>): Promise<IProject> {\r\n        try {\r\n            return await this.projectRepository.createProject(projectData);\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error creating project: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async updateProject(projectData: Partial<IProject>): Promise<IProject> {\r\n        try {\r\n            return await this.projectRepository.updateProject(projectData);\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error updating project: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async deleteProject(projectId: number): Promise<void> {\r\n        try {\r\n            await this.projectRepository.deleteProject(projectId);\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error deleting project: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async getAllProjects(): Promise<IProject[]> {\r\n        try {\r\n            return await this.projectRepository.getAllProjects();\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error retrieving projects: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    public async getProjectById(projectId: number): Promise<IProject | null> {\r\n        try {\r\n            const project = await this.projectRepository.getProjectById(projectId);\r\n            if (!project) throw new HttpException(404, \"Project not found\");\r\n            return project;\r\n        } catch (error) {\r\n            throw new HttpException(500, `Error retrieving project: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n"],"names":["ProjectService","createProject","projectData","projectRepository","error","HttpException","message","updateProject","deleteProject","projectId","getAllProjects","getProjectById","project","constructor","id","PROJECT_SERVICE_TOKEN","type"],"mappings":";;;;+BAOaA;;;eAAAA;;;wBAPW;+BAEM;iCACyB;mCACrB;;;;;;;;;;;;;;;;;;;;;;;AAG3B,IAAA,AAAMA,iBAAN,MAAMA;IAGT,MAAaC,cAAcC,WAA8B,EAAqB;QAC1E,IAAI;YACA,OAAO,MAAM,IAAI,CAACC,iBAAiB,CAACF,aAAa,CAACC;QACtD,EAAE,OAAOE,OAAO;YACZ,MAAM,IAAIC,4BAAa,CAAC,KAAK,CAAC,wBAAwB,EAAED,MAAME,OAAO,EAAE;QAC3E;IACJ;IAEA,MAAaC,cAAcL,WAA8B,EAAqB;QAC1E,IAAI;YACA,OAAO,MAAM,IAAI,CAACC,iBAAiB,CAACI,aAAa,CAACL;QACtD,EAAE,OAAOE,OAAO;YACZ,MAAM,IAAIC,4BAAa,CAAC,KAAK,CAAC,wBAAwB,EAAED,MAAME,OAAO,EAAE;QAC3E;IACJ;IAEA,MAAaE,cAAcC,SAAiB,EAAiB;QACzD,IAAI;YACA,MAAM,IAAI,CAACN,iBAAiB,CAACK,aAAa,CAACC;QAC/C,EAAE,OAAOL,OAAO;YACZ,MAAM,IAAIC,4BAAa,CAAC,KAAK,CAAC,wBAAwB,EAAED,MAAME,OAAO,EAAE;QAC3E;IACJ;IAEA,MAAaI,iBAAsC;QAC/C,IAAI;YACA,OAAO,MAAM,IAAI,CAACP,iBAAiB,CAACO,cAAc;QACtD,EAAE,OAAON,OAAO;YACZ,MAAM,IAAIC,4BAAa,CAAC,KAAK,CAAC,2BAA2B,EAAED,MAAME,OAAO,EAAE;QAC9E;IACJ;IAEA,MAAaK,eAAeF,SAAiB,EAA4B;QACrE,IAAI;YACA,MAAMG,UAAU,MAAM,IAAI,CAACT,iBAAiB,CAACQ,cAAc,CAACF;YAC5D,IAAI,CAACG,SAAS,MAAM,IAAIP,4BAAa,CAAC,KAAK;YAC3C,OAAOO;QACX,EAAE,OAAOR,OAAO;YACZ,MAAM,IAAIC,4BAAa,CAAC,KAAK,CAAC,0BAA0B,EAAED,MAAME,OAAO,EAAE;QAC7E;IACJ;IA1CAO,YAAY,AAAQV,iBAAoC,CAAE;;aAAtCA,oBAAAA;IAAuC;AA2C/D;;;QA7CWW,IAAIC,sCAAqB;QAAEC,MAAMhB"}