{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import { existsSync, mkdirSync } from 'fs';\r\nimport { join } from 'path';\r\nimport winston from 'winston';\r\nimport winstonDaily from 'winston-daily-rotate-file';\r\nimport { LOG_DIR } from \"../config/index\";\r\n\r\n// Check if running in Lambda environment\r\nconst isLambda = process.env.IS_LAMBDA === 'true';\r\n\r\nconst logger = winston.createLogger({\r\n  format: winston.format.combine(\r\n    winston.format.timestamp({\r\n      format: 'YYYY-MM-DD HH:mm:ss',\r\n    }),\r\n    winston.format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`)\r\n  ),\r\n  transports: [\r\n    // Always log to console\r\n    new winston.transports.Console({\r\n      format: winston.format.combine(\r\n        winston.format.splat(),\r\n        winston.format.colorize()\r\n      ),\r\n    }),\r\n  ],\r\n});\r\n\r\n// Only configure file transports when NOT in Lambda\r\nif (!isLambda) {\r\n  const logDir: string = join(__dirname, LOG_DIR ?? \"../logs\");\r\n  \r\n  if (!existsSync(logDir)) {\r\n    mkdirSync(logDir, { recursive: true });\r\n  }\r\n\r\n  logger.add(new winstonDaily({\r\n    level: 'debug',\r\n    datePattern: 'YYYY-MM-DD',\r\n    dirname: logDir + '/debug',\r\n    filename: `%DATE%.log`,\r\n    maxFiles: 30,\r\n    json: false,\r\n    zippedArchive: true,\r\n  }));\r\n\r\n  logger.add(new winstonDaily({\r\n    level: 'error',\r\n    datePattern: 'YYYY-MM-DD',\r\n    dirname: logDir + '/error',\r\n    filename: `%DATE%.log`,\r\n    maxFiles: 30,\r\n    handleExceptions: true,\r\n    json: false,\r\n    zippedArchive: true,\r\n  }));\r\n}\r\n\r\nconst stream = {\r\n  write: (message: string) => {\r\n    logger.info(message.substring(0, message.lastIndexOf('\\n')));\r\n  },\r\n};\r\n\r\nexport { logger, stream };"],"names":["logger","stream","isLambda","process","env","IS_LAMBDA","winston","createLogger","format","combine","timestamp","printf","level","message","transports","Console","splat","colorize","logDir","join","__dirname","LOG_DIR","existsSync","mkdirSync","recursive","add","winstonDaily","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","write","info","substring","lastIndexOf"],"mappings":";;;;;;;;;;;IA+DSA,MAAM;eAANA;;IAAQC,MAAM;eAANA;;;oBA/DqB;sBACjB;gEACD;+EACK;uBACD;;;;;;AAGxB,MAAMC,WAAWC,QAAQC,GAAG,CAACC,SAAS,KAAK;AAE3C,MAAML,SAASM,gBAAO,CAACC,YAAY,CAAC;IAClCC,QAAQF,gBAAO,CAACE,MAAM,CAACC,OAAO,CAC5BH,gBAAO,CAACE,MAAM,CAACE,SAAS,CAAC;QACvBF,QAAQ;IACV,IACAF,gBAAO,CAACE,MAAM,CAACG,MAAM,CAAC,CAAC,EAAED,SAAS,EAAEE,KAAK,EAAEC,OAAO,EAAE,GAAK,GAAGH,UAAU,CAAC,EAAEE,MAAM,EAAE,EAAEC,SAAS;IAE9FC,YAAY;QAEV,IAAIR,gBAAO,CAACQ,UAAU,CAACC,OAAO,CAAC;YAC7BP,QAAQF,gBAAO,CAACE,MAAM,CAACC,OAAO,CAC5BH,gBAAO,CAACE,MAAM,CAACQ,KAAK,IACpBV,gBAAO,CAACE,MAAM,CAACS,QAAQ;QAE3B;KACD;AACH;AAGA,IAAI,CAACf,UAAU;IACb,MAAMgB,SAAiBC,IAAAA,UAAI,EAACC,WAAWC,cAAO,aAAPA,cAAO,cAAPA,cAAO,GAAI;IAElD,IAAI,CAACC,IAAAA,cAAU,EAACJ,SAAS;QACvBK,IAAAA,aAAS,EAACL,QAAQ;YAAEM,WAAW;QAAK;IACtC;IAEAxB,OAAOyB,GAAG,CAAC,IAAIC,+BAAY,CAAC;QAC1Bd,OAAO;QACPe,aAAa;QACbC,SAASV,SAAS;QAClBW,UAAU,CAAC,UAAU,CAAC;QACtBC,UAAU;QACVC,MAAM;QACNC,eAAe;IACjB;IAEAhC,OAAOyB,GAAG,CAAC,IAAIC,+BAAY,CAAC;QAC1Bd,OAAO;QACPe,aAAa;QACbC,SAASV,SAAS;QAClBW,UAAU,CAAC,UAAU,CAAC;QACtBC,UAAU;QACVG,kBAAkB;QAClBF,MAAM;QACNC,eAAe;IACjB;AACF;AAEA,MAAM/B,SAAS;IACbiC,OAAO,CAACrB;QACNb,OAAOmC,IAAI,CAACtB,QAAQuB,SAAS,CAAC,GAAGvB,QAAQwB,WAAW,CAAC;IACvD;AACF"}